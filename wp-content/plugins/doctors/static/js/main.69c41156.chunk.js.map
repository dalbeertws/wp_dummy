{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Menu","SubMenu","Layout","Header","Footer","Sider","Content","Upload","Dragger","Select","OptGroup","getClinics","Object","keys","schedule","clinicData","dowOf","day","indexOf","Schedule","props","_this","slots","start","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_i","_arr","length","key","dayjs","set","hour","push","end","add","selected","clinics","ret","forEach","clinic","i","concat","export","_this2","s","doctorId","show","react_default","a","createElement","cellPadding","App_HourPicker","doctor","ref","day_0","find","day_1","day_2","day_3","day_4","day_5","day_6","React","Component","overlap","appointment","slot","toJSON","HourPicker","_this3","arr","minute","dow","data","hours","block","split","map","parseInt","e","state","setState","index","findIndex","_this4","d","format","style","whiteSpace","padding","border","cursor","userSelect","backgroundColor","className","id","onClick","toggleSelected","bind","options","value","name","align","es_select","defaultValue","width","onChange","setClinic","label","App","_this5","showModal","visible","showClinicsModal","clinicsVisible","handleOk","addDoctor","doctorNameInput","input","doctorIdInput","handleEditClinicsOk","newName","items","$","get","el","attr","replace","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","err","return","saveSchedule","console","log","handleCancel","loading","step","title","newSchedule","match","text","setStep","checked","disabled","nickname","stack","confirm","info","file","fileList","originFileObj","reader","FileReader","that","onload","dataURL","result","setAvatar","readAsDataURL","url","avatar","pid","_this6","_i2","_Object$keys","doctors","filter","provider","buttons","es_button","type","modal","onOk","onCancel","prefix","icon","color","placeholder","marginTop","marginLeft","marginBottom","upload","display","showUploadList","getAvatar","save","content","list","itemLayout","dataSource","renderItem","Item","margin","deleteDoctor","es_switch","size","defaultChecked","onToggleDoctor","Meta","src","description","setDoctor","App_Schedule","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69c41156.chunk.js","sourcesContent":["/* eslint-disable */\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { version, Button } from \"antd\";\nimport { DatePicker, Input, Spin, Alert } from \"antd\";\nimport { Layout, Menu, Icon } from \"antd\";\nconst SubMenu = Menu.SubMenu;\nconst { Header, Footer, Sider, Content } = Layout;\nimport { Upload, message } from \"antd\";\nconst Dragger = Upload.Dragger;\nimport { List, Avatar } from \"antd\";\nimport { Switch } from \"antd\";\n\nimport { Form } from \"antd\";\nimport { Select } from \"antd\";\nconst { Option, OptGroup } = Select;\nimport { Modal } from \"antd\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nfunction getClinics() {\n  return Object.keys(schedule.clinicData)\n  // [\n  //   \"53CF3389-6555-43D2-9D17-9890841F5BCA\",\n  //   \"085e44a4-0a52-45c7-bee6-28ce61a3c42a\"\n  // ];\n}\n\nfunction dowOf(day) {\n  return [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ].indexOf(day);\n}\n\nclass Schedule extends React.Component {\n  constructor(props) {\n    super(props);\n    this.schedule = [];\n    let slots, start;\n    for (var key of [0, 1, 2, 3, 4, 5, 6]) {\n      slots = [];\n      start = dayjs()\n        .set(\"hour\", 6)\n        .set(\"minute\", 0)\n        .set(\"second\", 0)\n        .set(\"millisecond\", 0);\n      while (start.hour() < 19) {\n        slots.push({\n          start: start,\n          end: start.add(15, \"minute\"),\n          selected: false\n        });\n        start = start.add(15, \"minute\");\n      }\n      this.schedule[key] = slots;\n    }\n    this.schedule[0] = [];\n  }\n\n  export() {\n    // console.log(\"exportng\");\n    let clinics = getClinics();\n    let ret = {};\n    clinics.forEach(clinic => {\n      ret[clinic] = {};\n    });\n    for (var i = 0; i < 7; i++) {\n      this[`day_${i}`].export();\n    }\n    // console.log(ret);\n    return ret;\n  }\n\n  render() {\n    let s = schedule[this.props.doctorId];\n    s.clinics = s.clinics || {}\n    let keys = Object.keys(s.clinics);\n    if (!this.props.show) return \"\";\n    return (\n      <table cellPadding=\"10\">\n      <tbody>\n        <tr>\n          <td>\n            <HourPicker\n              key=\"0\"\n              day=\"Sunday\"\n              doctor={this.props.doctorId}\n              ref={ref => {\n                this.day_0 = ref;\n              }}\n              clinic={keys.find(key => s.clinics[key][0])}\n            />\n          </td>\n          <td>\n            <HourPicker\n            key=\"1\"\n              day=\"Monday\"\n              ref={ref => {\n                this.day_1 = ref;\n              }}\n              doctor={this.props.doctorId}\n              clinic={keys.find(key => s.clinics[key][1])}\n            />\n          </td>\n          <td>\n            <HourPicker\n            key=\"2\"\n              day=\"Tuesday\"\n              ref={ref => {\n                this.day_2 = ref;\n              }}\n              doctor={this.props.doctorId}\n              clinic={keys.find(key => s.clinics[key][2])}\n            />\n          </td>\n          <td>\n            <HourPicker\n            key=\"3\"\n              day=\"Wednesday\"\n              ref={ref => {\n                this.day_3 = ref;\n              }}\n              doctor={this.props.doctorId}\n              clinic={keys.find(key => s.clinics[key][3])}\n            />\n          </td>\n          <td>\n            <HourPicker\n            key=\"4\"\n              day=\"Thursday\"\n              ref={ref => {\n                this.day_4 = ref;\n              }}\n              doctor={this.props.doctorId}\n              clinic={keys.find(key => s.clinics[key][4])}\n            />\n          </td>\n          <td>\n            <HourPicker\n            key=\"5\"\n              day=\"Friday\"\n              ref={ref => {\n                this.day_5 = ref;\n              }}\n              clinic={keys.find(key => s.clinics[key][5])}\n            />\n          </td>\n          <td>\n            <HourPicker\n            key=\"6\"\n              day=\"Saturday\"\n              ref={ref => {\n                this.day_6 = ref;\n              }}\n              doctor={this.props.doctorId}\n              clinic={keys.find(key => s.clinics[key][6])}\n            />\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst overlap = (appointment, slot) => {\n  // console.log({appointment: appointment})\n  // console.log({slot: slot})\n  return appointment.start.toJSON() === slot.start.toJSON();\n  // return appointment.start < slot.end && appointment.end > slot.start;\n};\n\nclass HourPicker extends React.Component {\n  constructor(props) {\n    super(props);\n    let i,\n      slot,\n      slots = [];\n    let start = dayjs()\n      .set(\"hour\", 6)\n      .set(\"minute\", 0)\n      .set(\"second\", 0)\n      .set(\"millisecond\", 0);\n    while (start.hour() < 19) {\n      slots.push({\n        start: start,\n        end: start.add(15, \"minute\"),\n        selected: false\n      });\n      start = start.add(15, \"minute\");\n    }\n\n    let dow = dowOf(this.props.day);\n\n    let arr, hour, minute;\n    let appointment;\n\n    try {\n      let data,\n        doctor = schedule[this.props.doctor];\n      if (doctor) {\n        let clinic = doctor.clinics[this.props.clinic];\n        if (clinic) {\n          if ((data = clinic[dow])) {\n            // // console.log(clinic);\n            if (data.hours) {\n              // // console.log({ hours: data.hours });\n              data.hours.forEach(block => {\n                appointment = {};\n                if (!block.start) return;\n\n                arr = block.start.split(\":\").map(i => parseInt(i));\n                hour = arr[0];\n                minute = arr[1];\n\n                appointment.start = dayjs()\n                  .set(\"hour\", hour)\n                  .set(\"minute\", minute)\n                  .set(\"second\", 0)\n                  .set(\"millisecond\", 0);\n                arr = block.end.split(\":\").map(i => parseInt(i));\n                hour = arr[0];\n                minute = arr[1];\n\n                appointment.end = dayjs()\n                  .set(\"hour\", hour)\n                  .set(\"minute\", minute)\n                  .set(\"second\", 0)\n                  .set(\"millisecond\", 0);\n                // // console.log(block);\n                for (i = 0; i < slots.length; i++) {\n                  // // console.log(slots[i], block);\n                  if (overlap(slots[i], appointment)) {\n                    // console.log(slots[i], appointment);\n                    // console.log('YES!');\n                    //\n                    slots[i].selected = true;\n                  } else {\n                    // console.log('NO!');\n                    // console.log(slots[i].start.toJSON() );\n                    // console.log(appointment.start.toJSON() );\n                    // console.log(slots[i].start == appointment.start );\n\n\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n    } catch (e) {\n      // console.log(e);\n      // console.log(e.stack);\n    }\n    this.state = { slots, clinic: this.props.clinic };\n  }\n\n  export() {\n    // // console.log(\"-- exporting\");\n    return { clinic: this.state.clinic, slots: this.state.slots };\n  }\n\n  setClinic(props, clinic, s) {\n    this.setState({ clinic: clinic });\n    // setTimeout(() => {\n    //   // console.log(this.state.clinic);\n    // }, 100);\n\n    // let dow = dowOf(props.day);\n    // // console.log(dow, clinic, props.doctor);\n    // // console.log({ s: s });\n    // let clinics = getClinics();\n    // if (clinic === \"\") {\n    //   // console.log(\"deleting\");\n    //   delete schedule[props.doctor][\"clinics\"][clinic][dow];\n    //   // console.log(schedule[props.doctor][\"clinics\"][clinic]);\n    // } else {\n    //   if (!schedule[props.doctor][\"clinics\"][clinic]) {\n    //     schedule[props.doctor][\"clinics\"][clinic] = \"\";\n    //   }\n    // }\n    // this.setState(schedule);\n  }\n\n  toggleSelected(s, props) {\n    let index = this.state.slots.findIndex(slot => slot.start === s.start);\n    this.state.slots[index] = {\n      start: s.start,\n      end: s.end,\n      selected: !s.selected\n    };\n\n    this.setState({ slots: this.state.slots });\n    let dow = dowOf(props.day);\n    // let clinic = this[`textInput${props.day}${props.doctor}`];\n    // console.log(s, props);\n  }\n\n  render() {\n    let d = this.props.clinic ? this.props.clinic : \"\";\n    // // console.log(d);\n    let slots = this.state.slots.map(s => {\n      let key = dowOf(this.props.day) + ' ' + s.start.format(\"HH:mm\")\n      // console.log(key)\n      return <div\n        style={{\n          whiteSpace: \"nowrap\",\n          padding: \"3px 25px 3px 25px\",\n          border: \"solid 1px black\",\n          cursor: \"pointer\",\n          userSelect: \"none\",\n          backgroundColor: s.selected ? \"yellow\" : \"#dddd\"\n        }}\n        key={key}\n        className={s.selected ? \"slot selected\" : \"\"}\n        id={key}\n        onClick={this.toggleSelected.bind(this, s, this.props)}\n      >\n        {s.start.format(\"HH:mm\")} - {s.end.format(\"HH:mm\")}\n      </div>\n    })\n\n    let options = getClinics().map(id => {\n      return <Option value={id} key={id}>\n        {schedule.clinicData[id].name}\n      </Option>\n    })\n\n    return (\n      <div>\n        <h3 align=\"center\">{this.props.day}</h3>\n        <Select\n\n          defaultValue={d}\n          style={{ width: 150 }}\n          onChange={this.setClinic.bind(this, this.props)}\n        >\n          <OptGroup label=\"Clinic\">\n            <Option value=\"\">---</Option>\n            {options}\n          </OptGroup>\n        </Select>\n        <hr />\n\n        {slots}\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      step: \"one\",\n      doctor: {\n        title: \"Doctor 3\"\n      }\n    };\n  }\n\n  save() {\n    // alert(\"Saved!\");\n    // console.log(this[\"schedule_2cc1047b-f5fd-4534-bb11-8f9f1d07849d\"]);\n    // this[\"schedule_2cc1047b-f5fd-4534-bb11-8f9f1d07849d\"].export();\n    // [\"---\", \"King of Prussia\", \"King of Prussia\", \"King of Prussia\", \"---\", \"King of Prussia\", \"---\"]\n    let newSchedule = {}\n    let clinic, clinics = $('.ant-select-selection-selected-value').get().map(s => $(s).attr('title'))\n    let slots\n\n    for(var i in clinics){\n      clinic = clinics[i]\n      if(!clinic.match(/\\w/)) continue\n      if(!newSchedule[clinic]) newSchedule[clinic] = {}\n      // console.log(clinic)\n      // slots = $('.slot.selected[id^=\"' + i + ' \"]')\n      slots = $('.slot.selected[id^=\"' + i + ' \"]').get().map(s => {\n        let arr = $(s).text().split(' - ')\n        return {\n          start: arr[0],\n          end: arr[1],\n        }\n\n      })\n      newSchedule[clinic]['' + i] = {hours: slots}\n    }\n    let id = $('.ant-list-item-meta-description').text()\n    // console.log(newSchedule)\n    schedule[id].clinics = newSchedule\n    try{\n      saveSchedule()\n    } catch(e){\n\n    }\n    // console.log(JSON.stringify(schedule))\n  }\n\n  setStep(step) {\n    this.setState({ step });\n  }\n\n  setDoctor(item) {\n    this.setState({ doctor: item });\n    this.setStep(\"two\");\n  }\n\n  onToggleDoctor(doctor, checked) {\n    // console.log(`switch to ${checked}`);\n    schedule[doctor.id].disabled = !checked;\n    // console.log(doctor);\n    this.setState({ schedule });\n    saveSchedule()\n  }\n\n  showModal = () => this.setState({ visible: true });\n  showClinicsModal = () => this.setState({ clinicsVisible: true });\n\n  addDoctor(name, id) {\n    try {\n      schedule[id] = {\n        nickname: name,\n        clinics: {}\n      };\n      [\n        \"085e44a4-0a52-45c7-bee6-28ce61a3c42a\",\n        \"53CF3389-6555-43D2-9D17-9890841F5BCA\"\n      ].forEach(clinic => {\n        schedule[id][\"clinics\"][clinic] = {};\n      });\n      // console.log(id, schedule[id]);\n\n      this.setState({ doctor: id });\n      saveSchedule()\n    } catch (e) {\n      console.log(e.stack);\n    }\n  }\n\n  deleteDoctor(id, name) {\n    if (confirm(`Delete ${name} ?`)) {\n      delete schedule[id];\n      this.setState({ doctor: null, step: \"one\" });\n      saveSchedule()\n    }\n  }\n\n  handleOk = e => {\n    this.addDoctor(\n      this.doctorNameInput.input.value,\n      this.doctorIdInput.input.value\n    );\n    this.setState({\n      visible: false\n    });\n  };\n\n  handleEditClinicsOk = e => {\n    // console.log('clinics ok')\n    let items = $('[id^=clinic_]').get().map(el => ({id: $(el).attr('id').replace('clinic_', ''), name: $(el).attr('value')}))\n    let oldName, newName, tmpClinic\n    for(var item of items){\n      oldName = schedule.clinicData[item.id].name\n      newName = item.name\n      schedule.clinicData[item.id].name = newName\n      // Object.keys(schedule).map(pid => {\n      //   if(schedule[pid].clinics && schedule[pid].clinics[oldName]){\n      //     tmpClinic = schedule[pid].clinics[oldName]\n      //     delete schedule[pid].clinics[oldName]\n      //     schedule[pid].clinics[newName] = tmpClinic\n      //   }\n      // })\n    }\n    // schedule['clinicData'] = clinicData\n    try{\n      saveSchedule()\n    } catch(e){\n      console.log(e)\n    }\n\n    this.setState({\n      clinicsVisible: false\n    });\n  };\n\n  handleCancel = e => {\n    // console.log(e);\n    this.setState({\n      visible: false, clinicsVisible: false\n    });\n  };\n\n  getAvatar(info) {\n    // console.log(\"--avatar\");\n    // console.log(info);\n    try{\n      let file = info.fileList[info.fileList.length - 1].originFileObj;\n\n      const reader = new FileReader();\n      let that = this;\n\n      reader.onload = () => {\n        const dataURL = reader.result;\n\n        that.setAvatar(dataURL);\n      };\n\n      reader.readAsDataURL(file);\n    } catch(e){\n\n    }\n  }\n\n  setAvatar(url) {\n    // // console.log(url);\n    let id = this.state.doctor.id;\n    // // console.log(id);\n\n    // // console.log(schedule[id]);\n    schedule[id].avatar = url;\n    this.setState({ avatar: url });\n    // console.log(url.length);\n    // // console.log({ avatar: schedule[id].avatar });\n  }\n\n\n\n  render() {\n    let pid\n    for(pid of Object.keys(schedule)){\n      if(schedule[pid].disabled === 'false'){\n        schedule[pid].disabled = false\n      }\n      console.log(pid)\n      console.log(schedule[pid].disabled)\n    }\n\n    let doctorIds = Object.keys(schedule).filter(id => id !== 'clinicData');\n    let doctors = doctorIds.map(id => {\n      let provider = schedule[id];\n      return {\n        id: id,\n        disabled: provider.disabled,\n        title: provider.nickname,\n        clinics: provider.clinics\n      };\n    });\n\n    if (this.state.step !== \"one\") {\n      doctors = doctors.filter(d => d.id === this.state.doctor.id);\n    }\n\n    //   ? this.doctors\n    //   :\n\n    let buttons =\n      this.state.step === \"one\" ? (\n        <div>\n          <Button type=\"primary\" onClick={this.showModal}>\n            Add Doctor\n          </Button>\n          <Modal\n            title=\"Add Doctor\"\n            visible={this.state.visible}\n            onOk={this.handleOk.bind(this)}\n            onCancel={this.handleCancel.bind(this)}\n          >\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n              ref={input => {\n                this.doctorNameInput = input;\n              }}\n              placeholder=\"Doctor Name\"\n            />\n\n            <Input\n              prefix={<Icon type=\"id\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n              type=\"id\"\n              ref={input => {\n                this.doctorIdInput = input;\n              }}\n              style={{ marginTop: \"10px\" }}\n              placeholder=\"Doctor ID\"\n            />\n          </Modal>\n          <Button type=\"primary\" onClick={this.showClinicsModal} style={{ marginLeft: \"10px\" }}>\n            Edit Clinics\n          </Button>\n          <Modal\n            title=\"Edit Clinics\"\n            visible={this.state.clinicsVisible}\n            onOk={this.handleEditClinicsOk.bind(this)}\n            onCancel={this.handleCancel.bind(this)}\n          >\n\n          {Object.keys(schedule.clinicData).map(id => {\n            return <div key={'div_' + id}>\n              <p>{id}</p>\n              <Input\n                className=\"clinic\"\n                id={'clinic_' + id}\n                style={{marginBottom:\"10px\"}}\n                prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                placeholder=\"Clinic Name\"\n                defaultValue={schedule.clinicData[id].name}\n              />\n            </div>\n          })}\n\n\n\n\n          </Modal>\n        </div>\n      ) : (\n        <table>\n          <tbody>\n          <tr>\n            <td>\n              <Button type=\"primary\" onClick={this.setStep.bind(this, \"one\")}>\n                <Icon type=\"left\" />\n                Go back\n              </Button>\n            </td>\n            <td>\n              <Upload\n                name=\"file\"\n                // action=\"//jsonplaceholder.typicode.com/posts/\"\n                style={{ display: \"inline\" }}\n                showUploadList=\"false\"\n                onChange={this.getAvatar.bind(this)}\n              >\n                <Button\n                  type=\"primary\"\n                  //  style={{ marginLeft: \"20px\" }}\n                >\n                  <Icon type=\"upload\" /> Change Photo\n                </Button>\n              </Upload>\n            </td>\n            <td>\n              <Button\n                type=\"primary\"\n                onClick={this.save.bind(this)}\n                // style={{ marginLeft: \"20px\" }}\n              >\n                Save\n                <Icon type=\"save\" />\n              </Button>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      );\n    let content = (\n      <div>\n        {buttons}\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={doctors}\n          renderItem={item => (\n            <div>\n              <List.Item>\n                <Icon\n                  type=\"delete\"\n\n                  style={this.state.step === \"one\" ? { margin: \"0px 0px 10px\" } : { display: \"none\" }}\n                  onClick={this.deleteDoctor.bind(this, item.id, item.title)}\n                />\n                <Switch\n                  size=\"small\"\n                  style={this.state.step === \"one\" ? { margin: \"0px 10px 12px\" } : { display: \"none\" }}\n                  defaultChecked={!schedule[item.id].disabled}\n\n                  onChange={this.onToggleDoctor.bind(this, item)}\n                />\n                <List.Item.Meta\n                  avatar={<Avatar src={schedule[item.id].avatar} />}\n                  title={item.title}\n                  description={item.id}\n                  onClick={\n                    schedule[item.id].disabled\n                      ? null\n                      : this.setDoctor.bind(this, item)\n                  }\n                />\n              </List.Item>\n              <Schedule\n                doctorId={item.id}\n                show={this.state.step === \"two\"}\n                ref={ref => {\n                  // console.log(`schedule_${item.id}`);\n                  this[`schedule_${item.id}`] = ref;\n                }}\n              />\n            </div>\n          )}\n        />\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n        {content}\n      </div>\n    );\n  }\n}\nexport default App;\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}